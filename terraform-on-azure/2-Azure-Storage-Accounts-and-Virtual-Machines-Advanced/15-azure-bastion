
virtualmachines.tf
==================
resource "azurerm_network_interface" "appinterface" {
  count=var.number_of_machines
  name                = "appinterface${count.index}"
  location            = local.location
  resource_group_name = local.resource_group_name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.subnets[count.index].id
    private_ip_address_allocation = "Dynamic"
  }
  depends_on = [
    azurerm_subnet.subnets,
   ]
}

data "azurerm_key_vault" "keyvault9900080" {
  name         = "keyvault9900080"
  resource_group_name = "new-grp"
}

data "azurerm_key_vault_secret" "vmpassword" {
  name         = "vmpassword"
  key_vault_id = data.azurerm_key_vault.keyvault9900080.id
}

resource "azurerm_windows_virtual_machine" "appvm" {
  count=var.number_of_machines
  name                = "appvm${count.index}"
  resource_group_name = local.resource_group_name
  location            = local.location
  size                = "Standard_D2S_v3"
  admin_username      = "demouser"
  admin_password      = data.azurerm_key_vault_secret.vmpassword.value
  network_interface_ids = [
    azurerm_network_interface.appinterface[count.index].id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2019-Datacenter"
    version   = "latest"
  }

  depends_on = [
    azurerm_network_interface.appinterface,
    azurerm_resource_group.appgrp
   ]
}


variables.tf
============
variable "number_of_subnets" {
    type=number
    description="This defines the number of subnets"
    default=2
    validation {
      condition = var.number_of_subnets < 5
      error_message = "The number of subnets must be less than 5."
    }
}

variable "number_of_machines" {
  type=number
  description="This defines the number of subnets"
  default=2

}


terraform.tfvars
================
number_of_subnets=3
number_of_machines=1


provider.tf
===========
terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "3.57.0"
    }
  }
}

provider "azurerm" {
  subscription_id = "XXXXX"
  tenant_id = "XXXXX"
  client_id = "XXXXX"
  client_secret = "XXXXX"
  features {}
}

networking.tf
==============
resource "azurerm_resource_group" "appgrp" {
  name     = local.resource_group_name
  location = local.location
}

resource "azurerm_virtual_network" "appnetwork" {
  name                = local.virtual_network.name
  location            = local.location
  resource_group_name = local.resource_group_name
  address_space       = [local.virtual_network.address_space]
  depends_on = [
    azurerm_resource_group.appgrp
   ]
}

resource "azurerm_subnet" "subnets" {
  count=var.number_of_subnets
  name                 = "Subnet${count.index}"
  resource_group_name  = local.resource_group_name
  virtual_network_name = local.virtual_network.name
  address_prefixes     = ["10.0.${count.index}.0/24"]
  depends_on = [
    azurerm_virtual_network.appnetwork
   ]
}

resource "azurerm_network_security_group" "appnsg" {
  name                = "app-nsg"
  location            = local.location
  resource_group_name = local.resource_group_name

  security_rule {
    name                       = "AllowRDP"
    priority                   = 300
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "3389"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
  depends_on = [
    azurerm_resource_group.appgrp
   ]
}

resource "azurerm_subnet_network_security_group_association" "appnsglink" {
  count=var.number_of_subnets
  subnet_id                 = azurerm_subnet.subnets[count.index].id
  network_security_group_id = azurerm_network_security_group.appnsg.id
  depends_on = [
    azurerm_virtual_network.appnetwork,
    azurerm_network_security_group.appnsg
   ]
}


locals.tf
=========
locals {
  resource_group_name="app-grp"
  location="Central India"
  virtual_network={
    name="app-network"
    address_space="10.0.0.0/16"
  }
}

bastion.tf
===========
resource "azurerm_subnet" "bastionsubnet" {
  name                 = "AzureBastionSubnet"
  resource_group_name  = local.resource_group_name
  virtual_network_name = local.virtual_network.name
  address_prefixes     = ["10.0.10.0/24"]
  depends_on = [
    azurerm_virtual_network.appnetwork
   ]
}


resource "azurerm_public_ip" "bastionip" {
  name                = "bastion-ip"
  resource_group_name = local.resource_group_name
  location            = local.location
  allocation_method   = "Static"
  sku = "Standard"
  depends_on = [
    azurerm_resource_group.appgrp
   ]
}

resource "azurerm_bastion_host" "appbastion" {
  name                = "appbastion"
  location            = local.location
  resource_group_name = local.resource_group_name

  ip_configuration {
    name                 = "configuration"
    subnet_id            = azurerm_subnet.bastionsubnet.id
    public_ip_address_id = azurerm_public_ip.bastionip.id
  }
}



terraform plan -out main.tfplan
terraform apply main.tfplan
