In Last section "16-building-a-SQL-Server-VM", we have seen how to bootstrap a SQL Server in Azure VM.

Now we will see how to add tables and data into that Azure SQL VM. Means we will bootstrap Azure VM with
SQL Database and add tables and data.

In Last section we have bootstrap a Azure VM with SQL Based image and logged into to VM using windows based
Authentication and seen that "SQL is installed" and "Azure Data Studio" is also Installed in that VM.
But Now to connect to that SQL Server (installed in that VM) & Add tables/data, we need to use SQL Based Authentication.

1.
In last section After creating Resources, we have seen For:
dbvm (SQL virtual machine) -> Security Configuration -> SQL Credentials, SQL Authentication:
Disable (by default this is seletected) & Enable
Becoz in last section in "virtualmachines.tf" it has been enabled Authentication on VM/windows Level not on SQL Authentication level.
But Now we need to select the option as "Enable" to have SQL Authentication so that can login to SQL Database using
"Azure Data Studio" running in that Azure VM. We will see how we can select this option as "Enable" using terraform.

In virtualmachines.tf file, we have to add below sql level Authentication Arguments to select SQL Authentication as
"Enable".

resource "azurerm_mssql_virtual_machine" "mssqlmachine" {
  virtual_machine_id = azurerm_windows_virtual_machine.dbvm.id
  sql_license_type   = "PAYG"
  sql_connectivity_update_password = "Azure@1234"
  sql_connectivity_update_username = "sqladmin"
  sql_connectivity_port            = 1433
  sql_connectivity_type            = "PUBLIC"
}

2.
There is 1 more point here. We will Enable Public Acess to the DB just to have to connected from VM so that we can
connect to SQL Databse from Azure VM (using Azure Data Studio).
In last section After creating Resources, we have seen For:
Go to dbvm (SQL virtual machine) -> Security Configuration -> Security & Networking SQL connectivity,
by default it's selected as "Private (within Virtual Network)" which is fine as DBs should have Private
connectivity not Public. But in that drop-down option this time we will select "public".
But now we will do that using terraform while bootstrapping the Azure SQL VM.

In Above point 1, we see below is set as Public , so that is the way to make this option as public.
sql_connectivity_type            = "PUBLIC"

3. Now we need to do 1 Final thing. As we are bootstrapping Azure SQL VM and also adding tables and data.
So we have a file "01.sql" having tables and data. we also have a file customscript.tf, which will run a script "Script.ps1".
script "Script.ps1" will run as extension in the Azure SQL VM & script "Script.ps1" will call file "01.sql" which will
add tables and data in Azure SQL VM.
So, to do this we need to have a Storage Account and create a container in that SA and upload these 2 scripts there.
See file - customscript.tf


Run plan and Apply. Then Login to Azure VM and copy public IP from VM overview page. Login to Azure VM.
open Azure Data Studio -> paste this public IP -> select "SQL Login" in Authentication or whatever the next option it shows.
Enter username and Password which we have enetered in file virtualmachines.tf , below Authentication.

resource "azurerm_mssql_virtual_machine" "mssqlmachine" {
  virtual_machine_id = azurerm_windows_virtual_machine.dbvm.id
  sql_license_type   = "PAYG"
  sql_connectivity_update_password = "Azure@1234"
  sql_connectivity_update_username = "sqladmin"
  sql_connectivity_port            = 1433
  sql_connectivity_type            = "PUBLIC"
}


01.sql
======
CREATE TABLE Products
(
     ProductID int,
     ProductName varchar(1000),
     Quantity int
)


INSERT INTO Products(ProductID,ProductName,Quantity) VALUES (1,'Mobile',100)

INSERT INTO Products(ProductID,ProductName,Quantity) VALUES (2,'Laptop',200)

INSERT INTO Products(ProductID,ProductName,Quantity) VALUES (3,'Tabs',300)

customscript.tf
===============
resource "azurerm_storage_account" "vmstore211985" {
  name                     = "vmstore211985"
  resource_group_name      = "app-grp"
  location                 = "North Europe"
  account_tier             = "Standard"
  account_replication_type = "LRS"
  account_kind = "StorageV2"
  depends_on = [
    azurerm_resource_group.appgrp
  ]
}

resource "azurerm_storage_container" "scripts" {
  name                  = "scripts"
  storage_account_name  = "vmstore211985"
  container_access_type = "blob"
  depends_on=[
    azurerm_storage_account.vmstore211985
    ]
}

resource "azurerm_storage_blob" "powershellscript" {
  name                   = "Script.ps1"
  storage_account_name   = "vmstore211985"
  storage_container_name = "scripts"
  type                   = "Block"
  source                 = "Script.ps1"
   depends_on=[azurerm_storage_container.scripts]
}

resource "azurerm_storage_blob" "sqlscript" {
  name                   = "01.sql"
  storage_account_name   = "vmstore211985"
  storage_container_name = "scripts"
  type                   = "Block"
  source                 = "01.sql"
   depends_on=[azurerm_storage_container.scripts

   ]
}

resource "azurerm_virtual_machine_extension" "vmextension" {
  name                 = "dbvm-extension"
  virtual_machine_id   = azurerm_windows_virtual_machine.dbvm.id
  publisher            = "Microsoft.Compute"
  type                 = "CustomScriptExtension"
  type_handler_version = "1.10"
  depends_on = [
    azurerm_storage_blob.powershellscript,
    azurerm_storage_blob.sqlscript
  ]
  settings = <<SETTINGS
    {
        "fileUris": ["https://${azurerm_storage_account.vmstore211985.name}.blob.core.windows.net/scripts/Script.ps1"],
          "commandToExecute": "powershell -ExecutionPolicy Unrestricted -file Script.ps1"
    }
SETTINGS

}


locals.tf
=========
locals {
  resource_group_name="app-grp"
  location="Central India"

  virtual_network={
    name="app-network"
    address_space="10.0.0.0/16"
  }
}


main.tf
=======
resource "azurerm_resource_group" "appgrp" {
  name     = local.resource_group_name
  location = local.location
}


networking.tf
=============
resource "azurerm_virtual_network" "appnetwork" {
  name                = local.virtual_network.name
  location            = local.location
  resource_group_name = local.resource_group_name
  address_space       = [local.virtual_network.address_space]
  depends_on = [
    azurerm_resource_group.appgrp
  ]
}

resource "azurerm_subnet" "appsubnet" {
    name                 = "appsubnet"
    resource_group_name  = local.resource_group_name
    virtual_network_name = local.virtual_network.name
    address_prefixes     = ["10.0.0.0/24"]
        depends_on = [
      azurerm_virtual_network.appnetwork
    ]
}

resource "azurerm_subnet" "dbsubnet" {
    name                 = "dbsubnet"
    resource_group_name  = local.resource_group_name
    virtual_network_name = local.virtual_network.name
    address_prefixes     = ["10.0.1.0/24"]
    depends_on = [
      azurerm_virtual_network.appnetwork
    ]
}

resource "azurerm_network_security_group" "dbnsg" {
  name                = "db-nsg"
  location            = local.location
  resource_group_name = local.resource_group_name

  security_rule {
    name                       = "AllowRDP"
    priority                   = 300
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "3389"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowSQL"
    priority                   = 400
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "1433"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

depends_on = [
    azurerm_virtual_network.appnetwork
  ]
}

resource "azurerm_subnet_network_security_group_association" "dbnsg-link" {
  subnet_id                 = azurerm_subnet.dbsubnet.id
  network_security_group_id = azurerm_network_security_group.dbnsg.id

  depends_on = [
    azurerm_virtual_network.appnetwork,
    azurerm_network_security_group.dbnsg
  ]
}


provider.tf
===========
terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "3.57.0"
    }
  }
}

provider "azurerm" {
  subscription_id = "XXXXX"
  tenant_id = "XXXXX"
  client_id = "XXXXX"
  client_secret = "XXXXX"
  features {}
}


Script.ps1
==========
$LoginName="sqladmin"
$LoginPassword="Azure@1234"
$DatabaseName="appdb"
$ServerName="dbvm"
$DBQuery="CREATE DATABASE appdb"


Invoke-SqlCmd -ServerInstance $ServerName -U $LoginName -p $LoginPassword -Query $DBQuery


$LoginName="sqladmin"
$LoginPassword="Azure@1234"
$ServerName="dbvm"
$DatabaseName="appdb"
$ScriptFile="https://vmstore4577687.blob.core.windows.net/scripts/01.sql"
$Destination="D:\01.sql"


Invoke-WebRequest -Uri $ScriptFile -OutFile $Destination
Invoke-SqlCmd -ServerInstance $ServerName -InputFile $Destination -Database $DatabaseName -Username $LoginName -Password $LoginPassword


virtualmachines.tf
===================
resource "azurerm_network_interface" "dbinterface" {
  name                = "dbinterface"
  location            = local.location
  resource_group_name = local.resource_group_name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.dbsubnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id = azurerm_public_ip.dbip.id
  }

  depends_on = [
    azurerm_virtual_network.appnetwork,
    azurerm_public_ip.dbip
  ]
}

resource "azurerm_public_ip" "dbip" {
  name                = "db-ip"
  resource_group_name = local.resource_group_name
  location            = local.location
  allocation_method   = "Static"
  depends_on = [
    azurerm_resource_group.appgrp
  ]
}


resource "azurerm_windows_virtual_machine" "dbvm" {
  name                = "dbvm"
  resource_group_name = local.resource_group_name
  location            = local.location
  size                = "Standard_D2s_v3"
  admin_username      = "dbuser"
  admin_password      = "Azure@123"
  network_interface_ids = [
    azurerm_network_interface.dbinterface.id
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftSQLServer"
    offer     = "sql2019-ws2019"
    sku       = "sqldev"
    version   = "15.0.220510"
  }


  depends_on = [
    azurerm_virtual_network.appnetwork,
    azurerm_network_interface.dbinterface
  ]
}


resource "azurerm_mssql_virtual_machine" "mssqlmachine" {
  virtual_machine_id = azurerm_windows_virtual_machine.dbvm.id
  sql_license_type   = "PAYG"
  sql_connectivity_update_password = "Azure@1234"
  sql_connectivity_update_username = "sqladmin"
  sql_connectivity_port            = 1433
  sql_connectivity_type            = "PUBLIC"

}
