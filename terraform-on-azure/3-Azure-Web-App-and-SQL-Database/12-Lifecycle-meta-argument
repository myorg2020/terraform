Suppose if we want terraform to ignore any value changes to be captured, we use "ignore_changes".
e.g: In resource "azurerm_mssql_database" we don't want "license_type" value change to be captured by Terraform,
we can use "lifecycle" block and add like below:

lifecycle {
ignore_changes = [
  license_type
 ]
}

sqldatabase.tf
===============
resource "azurerm_mssql_server" "sqlserver" {
  name                         = "sqlserver20239906055400"
  resource_group_name          = local.resource_group_name
  location                     = local.location
  version                      = "12.0"
  administrator_login          = "sqladmin"
  administrator_login_password = "Azure@1234"
  depends_on = [
    azurerm_resource_group.appgrp
   ]

}

resource "azurerm_mssql_database" "appdb" {
  name           = "appdb"
  server_id      = azurerm_mssql_server.sqlserver.id
  collation      = "SQL_Latin1_General_CP1_CI_AS"
  license_type   = "LicenseIncluded"
  max_size_gb    = 2
  sku_name       = "S0"

  lifecycle {
  ignore_changes = [
    license_type
   ]
  }

  depends_on = [
    azurerm_mssql_server.sqlserver
   ]
}

resource "azurerm_mssql_firewall_rule" "allowmyclientip" {
  name             = "AllowClientIP"
  server_id        = azurerm_mssql_server.sqlserver.id
  start_ip_address = "49.205.34.220"
  end_ip_address   = "49.205.34.220"
  depends_on = [
    azurerm_mssql_server.sqlserver
   ]
}


provider.tf
===========
terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "3.57.0"
    }
  }
}

provider "azurerm" {
  subscription_id = "XXXXX"
  tenant_id = "XXXXX"
  client_id = "XXXXX"
  client_secret = "XXXXX"
  features {}
}


main.tf
=======
resource "azurerm_resource_group" "appgrp" {
  name     = local.resource_group_name
  location = local.location
}


locals.tf
=========
locals {
  resource_group_name="app-grp"
  location="Central India"
}
