1. After a IAM user gets created, in this case as "lucy"...By default user won't have any permission to access
   any AWS resource.

2. We need to Provide permission to the user to have access of resources.

3. So for that we need to create a Policy and then attach the policy to a user.

4. In this case as "lucy" is a Technical Team Lead. Hence, we need to assign Admin Access for all resources
   to perform all the Actions.

In AWS Console if we navigate to IAM -> Policies -> Search for "AdministratorAccess".
This is a default policy created by AWS for all resources to perform all the Actions.
So,  just click on "AdministratorAccess", click on JSON option to get JSON format for this Policy which
looks like below.

So, we can use this same Json to create our own Policy (which will allow to perform all the Actions for all
resources). And then Attach this to "lucy" user.

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
        }
    ]
}

provider.tf
===========
provider and access/seceret key related syntax.


main.tf
=======
Use below resource to create our own Policy using the above json file format. And we give our Policy name as
"AdminUsers" and using below way can pass that json format. This will create a Policy in AWS Console.
we can check this, Go to IAM -> Policies -> search for "AdminUsers" (Type as Customer managed).

resource "aws_iam_policy" "adminUser" {
  name        = "AdminUsers"
  policy      = jsonencode(
  {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
        }
    ]
  })
}


Now Once the Policy is created, Attach this to user using below resource.


resource "aws_iam_user_policy_attachment" "lucy-admin-access" {
  user       = aws_iam_user.admin-user.name
  policy_arn = aws_iam_policy.adminUser.arn
}


For the resource "aws_iam_policy" there is another way also to pass the json value. Like Below.
1. create a file admin-policy.json and add the json data in to it.
2. In main.tf file call this file using "file" built-in fucntion in Policy argument.
    policy      = file("admin-policy.json")
